import { writable } from 'svelte/store';
import type { Note, CreateNoteData } from './types';
import { notesDB } from './database';
import { toasts } from './stores/toasts';

// –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–æ—Ä—ã
export const notes = writable<Note[]>([]);
export const isLoading = writable<boolean>(false);
export const error = writable<string | null>(null);

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–µ—Ç–∫–∞–º–∏
export const notesActions = {
  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
  async loadNotes() {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∑–∞–º–µ—Ç–æ–∫ –∏–∑ IndexedDB...');
    isLoading.set(true);
    error.set(null);
    
    try {
      console.log('üìä –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      const allNotes = await notesDB.notes.orderBy('createdAt').reverse().toArray();
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫:', allNotes.length, allNotes);
      notes.set(allNotes);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–º–µ—Ç–æ–∫:', err);
      error.set('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏');
    } finally {
      isLoading.set(false);
      console.log('üèÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
  },

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
  async createNote(noteData: CreateNoteData) {
    console.log('üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É:', noteData);
    isLoading.set(true);
    error.set(null);

    try {
      const now = new Date();
      const newNote: Note = {
        id: crypto.randomUUID(), // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        ...noteData,
        createdAt: now,
        updatedAt: now
      };

      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ IndexedDB:', newNote);
      await notesDB.notes.add(newNote);
      console.log('‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ—Ä
      notes.update(currentNotes => [newNote, ...currentNotes]);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      toasts.add({
        message: '–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!',
        type: 'success'
      });
      
      return true;
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏:', err);
      const errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É';
      error.set(errorMessage);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      toasts.add({
        message: errorMessage,
        type: 'error'
      });
      
      return false;
    } finally {
      isLoading.set(false);
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
  async updateNote(id: string, updates: Partial<CreateNoteData>) {
    isLoading.set(true);
    error.set(null);

    try {
      const updateData = {
        ...updates,
        updatedAt: new Date()
      };

      await notesDB.notes.update(id, updateData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ—Ä
      notes.update(currentNotes => 
        currentNotes.map(note => 
          note.id === id ? { ...note, ...updateData } : note
        )
      );
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      toasts.add({
        message: '–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!',
        type: 'success'
      });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏:', err);
      const errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É';
      error.set(errorMessage);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      toasts.add({
        message: errorMessage,
        type: 'error'
      });
      
      throw err;
    } finally {
      isLoading.set(false);
    }
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
  async deleteNote(id: string) {
    isLoading.set(true);
    error.set(null);

    try {
      await notesDB.notes.delete(id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ—Ä
      notes.update(currentNotes => 
        currentNotes.filter(note => note.id !== id)
      );
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      toasts.add({
        message: '–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!',
        type: 'success'
      });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏:', err);
      const errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É';
      error.set(errorMessage);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      toasts.add({
        message: errorMessage,
        type: 'error'
      });
      
      throw err;
    } finally {
      isLoading.set(false);
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID
  async getNoteById(id: string): Promise<Note | undefined> {
    try {
      return await notesDB.notes.get(id);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏:', err);
      error.set('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–º–µ—Ç–∫—É');
      return undefined;
    }
  },

  // –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫
  async searchNotes(query: string, tags: string[] = []): Promise<Note[]> {
    try {
      let result = await notesDB.notes.orderBy('createdAt').reverse().toArray();
      
      if (query) {
        const lowerQuery = query.toLowerCase();
        result = result.filter(note => 
          note.title.toLowerCase().includes(lowerQuery) ||
          note.content.toLowerCase().includes(lowerQuery)
        );
      }
      
      if (tags.length > 0) {
        result = result.filter(note => 
          tags.some(tag => note.tags.includes(tag))
        );
      }
      
      return result;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–º–µ—Ç–æ–∫:', err);
      error.set('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫');
      return [];
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–≥–æ–≤
  async getAllTags(): Promise<string[]> {
    try {
      const allNotes = await notesDB.notes.toArray();
      const tagsSet = new Set<string>();
      
      allNotes.forEach(note => {
        note.tags.forEach(tag => tagsSet.add(tag));
      });
      
      return Array.from(tagsSet).sort();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤:', err);
      return [];
    }
  }
};